= javascript_include_tag 'lib/markdown'

.col-md-7
  / https://thepugautomatic.com/2012/08/rails-sti-and-form-for/
  / .becomes so that it looks up the correct form paths
  / then we revert back so that simple_form lookups will succeed based on subtype
  / Finally, we monkey with the params with Release.fix_params so we can update our models
  = simple_form_for [@release.app, @release.becomes(Release)], html: { id: "release_edit" } do |f|
    - f.object = @release.becomes(@release.class)
    - f.object_name = ActiveModel::Naming.param_key(f.object)
    = f.input :title
    = f.input :version, pattern: true, min_max: true
    - if @release.android?
      = f.input :display_version
    = f.input :body, input_html: { id: "simple-mde", rows: 20 }, wrapper: :vertical_form, label: false
    = f.input :published, wrapper: :custom_boolean
    = f.button :submit, class: "btn-primary mr-2"
    = link_to "Cancel", app_path(@app), class: "btn btn-outline-secondary"
  - unless @release.id.nil?
    hr.my-4
    = link_to "Delete Release", app_release_path(@app, @release), method: "delete", data: {confirm: "Are you sure?"}, role: "button", class: "btn mb-5 mr-2 btn-danger"
.col-md-5
  .device[style="margin-left: 40px; transform: scale(0.75); transform-origin: 50% 0; position: fixed;" class=device_class(@app)]
    .device-frame
      iframe.device-content[id="preview" src=""]
    .device-stripe
    .device-header
    .device-sensors
    .device-btns
    .device-power
javascript:
  init("#{@app.uuid}");